name: CI/CD Pipeline

on:
  push:
    branches:
      - feature/embeddings
      - test
      - chore/setup/eslint-prettier
      - main

  pull_request:
    branches:
      - feature/embeddings
      - test
      - chore/setup/eslint-prettier
      - main

jobs:
  # Job separado para verificación de código (más rápido)
  code-quality:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 22.x
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check Prettier version
        run: npx prettier --version

      - name: Format all files
        run: npx prettier --write .

      - name: Run Prettier check
        run: npm run format:check

      # Luego ESLint (más lento)
      - name: Run ESLint
        run: npm run lint

      # TypeScript checking al final
      - name: Run TypeScript type checking
        run: npx tsc --noEmit

      # Opcional: Guardar resultados de linting para PR comments
      - name: Annotate ESLint results
        if: failure()
        uses: ataylorme/eslint-annotate-action@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: "eslint-report.json"

  # Job de testing con matriz de Node.js
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        node-version: [18.x, 22.x]
      fail-fast: false # Continuar con otras versiones si una falla
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      API_KEY: ${{ secrets.API_KEY }}
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      # Usar DB en memoria para tests más rápidos
      - name: Run migrations for testing
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: "file:./test.db"

      - name: Run seed script
        run: npx prisma db seed
        env:
          DATABASE_URL: "file:./test.db"

      - name: Run tests with coverage
        run: npm run test:coverage

      # Subir coverage solo para Node 22.x
      - name: Upload coverage reports
        if: matrix.node-version == '22.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # Job de seguridad (opcional pero recomendado)
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 22.x
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for known vulnerabilities
        run: npx audit-ci --high

  # Deploy solo después de que TODO pase
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [code-quality, test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production # Requiere aprobación manual si está configurado
    steps:
      - name: Deploy to Render
        run: |
          curl -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            https://api.render.com/deploy/srv-d1s3juemcj7s73a2j2vg?key=Pb9Jif2Sra8

      - name: Verify deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          # Opcional: hacer health check de tu API
          # curl -f https://tu-api.onrender.com/health || exit 1

  # Job adicional para PRs: verificar que no haya conflictos de merge
  pr-checks:
    name: PR Additional Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Necesario para comparar branches

      - name: Check for merge conflicts
        run: |
          git checkout ${{ github.event.pull_request.base.ref }}
          git checkout ${{ github.event.pull_request.head.ref }}
          git merge-base ${{ github.event.pull_request.base.ref }} ${{ github.event.pull_request.head.ref }}

      - name: Check PR size
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | wc -l)
          echo "Changed files: $CHANGED_FILES"
          if [ $CHANGED_FILES -gt 50 ]; then
            echo "::warning::PR changes more than 50 files. Consider breaking it down."
          fi
